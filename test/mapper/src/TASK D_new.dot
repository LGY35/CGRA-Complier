// ../../src/mapper/mapper.out -d './src/TASK D_new.dot' -a './output/TASK D_new.asm' -r './output/TASK D_new.rout.dot' -l 1512 -c '../test_CGRA_design/myADL.json' -g 1 > './output/TASK D_new.map'
/*add0
for(i=0;i<1512;i++) {
    p = press_P[i];
    finalx[359+p] = c[i]
    if (i < 360) {
        finalx[i] = info[i];
    }
}
*/
digraph G {
    // constant
    base_finalx                 [opcode=const, val=0];
    press_P                     [opcode=const, val=0];
    c                           [opcode=const, val=0];
    info                        [opcode=const, val=0]; //all address set to 0 
    int_width                   [opcode=const, val=1]; //using order in array, instead of width
    const1                      [opcode=const, val=1];
    const359                    [opcode=const, val=359];
    const360                    [opcode=const, val=360];
    i                           [opcode=const, val=0];
    // loop add
    loop_add0[opcode=add];
    loop_add1[opcode=add];
    loop_add2[opcode=add];
    loop_add3[opcode=add];
    loop_add4[opcode=add];
    loop_add5[opcode=add];
    // load
    load0[opcode=load]; //press_P[i]
    load1[opcode=load]; //c[i]
    load2[opcode=load]; //finalx[i]
    load3[opcode=load]; //info[i]
    // add
    add0[opcode=add];
    add1[opcode=add];
    // mul
    mul0[opcode=mul];
    // store
    store0[opcode=store]; //finalx[359+p]
    store1[opcode=store]; //finalx[i]
    //le
    lt0[opcode=lt];
    // select
    select0[opcode=sel];
//============================================================================================
    press_P->loop_add0[operand=0,type=const_base];
    int_width->loop_add0[operand=1];    
    
    c->loop_add1[operand=0,type=const_base];
    int_width->loop_add1[operand=1]; 
    
    base_finalx->loop_add2[operand=0,type=const_base];
    int_width->loop_add2[operand=1]; 
    
    info->loop_add3[operand=0,type=const_base];
    int_width->loop_add3[operand=1]; 
    
    i->loop_add4[operand=0,type=const_base];
    const1->loop_add4[operand=1]; 

    base_finalx->loop_add5[operand=0,type=const_base];
    int_width->loop_add5[operand=1]; 
//============================================================================================
    loop_add0->load0[operand=0];        // load press_P[i]
    loop_add1->load1[operand=0];        // load c[i]
    loop_add2->load2[operand=0];        // load finalx[i]
    loop_add3->load3[operand=0];        // load info[i]

//============================================================================================
    const359->add0[operand=0];
    load0->add0[operand=1];
    add0->mul0[operand=0];
    int_width->mul0[operand=1];
    mul0->add1[operand=0];
    base_finalx->add1[operand=1];   // calc addr offinalx[259+p]

    add1->store0[operand=0];
    load1->store0[operand=1];       // store finalx[259+p]

    loop_add4->lt0[operand=0];
    const360->lt0[operand=1];       // test i < 360

    lt0->select0[operand=0];
    load3->select0[operand=1];
    load2->select0[operand=2];      // select finalx[i] and info[i]

    loop_add5->store1[operand=0];
    select0->store1[operand=1];     //store finalx[i]
//============================================================================================
    // indicating that load2 should be done before store1
    // avoid the possibility when p=i, load2 will load finalx[i] that haven't be changed
    store0->load2[type=order, color=blue] // simply indicating that store0 should be done before store1
}
